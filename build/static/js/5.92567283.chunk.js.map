{"version":3,"sources":["AxiosUtil.js","view/PlaceSearcher.jsx"],"names":["AxiosInstance","Axios","create","withCredentials","baseURL","searchModes","id","label","placeholder","initialState","connect","state","ownProps","dispatch","search","result","type","actions","place","updatePlaces","placeList","places","history","fuse","Fuse","keys","useState","searchMode","setSearchMode","open","setOpen","searching","setSearching","map","item","searchingList","setSearchingList","selectedIndex","setSelectedIndex","selectedSearch","useEffect","get","then","r","data","xs","row","className","onChange","evt","target","value","required","autoComplete","onFocus","onBlur","onKeyUp","keyCode","preventDefault","document","querySelector","click","length","color","onClick","invalidSearchNode","style","borderColor","date","Date","placeID","getFullYear","getMonth","getDate","push","show","accent","idx","placeName","onClose","closeButton"],"mappings":"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","file":"static/js/5.92567283.chunk.js","sourcesContent":["import Axios from \"axios\";\r\nimport {Agent} from 'https'\r\n\r\nexport const AxiosInstance = Axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"http://3.35.0.42:8080/\"\r\n})","import React, {useEffect, useState} from 'react'\r\nimport {\r\n    CButton,\r\n    CCol,\r\n    CCollapse,\r\n    CFormGroup,\r\n    CInput,\r\n    CListGroup,\r\n    CListGroupItem,\r\n    CModal,\r\n    CModalBody,\r\n    CModalHeader,\r\n    CModalTitle,\r\n    CRow,\r\n    CSelect\r\n} from \"@coreui/react\";\r\nimport {AxiosInstance} from \"../AxiosUtil\";\r\nimport {connect} from 'react-redux'\r\nimport Fuse from \"fuse.js\";\r\n\r\nimport {actions} from '../store'\r\n\r\nconst searchModes = [\r\n    {id: \"place\", label: \"장소\", placeholder: \"장소를 입력해주세요\"},\r\n    {id: \"user\", label: \"사용자\", placeholder: \"사용자 이름을 입력해주세요\"}\r\n]\r\n\r\nconst initialState = {\r\n    open: false,\r\n    header: \"검색 불가\",\r\n    content: `검색 조건을 충족하지 못했거나,\r\n    조건을 만족하는 결과를 찾을 수 없습니다!`\r\n}\r\n\r\nconst PlaceSearcher = ({search, updatePlaces, places = [], history}) => {\r\n    const fuse = new Fuse(places, {\r\n        keys: ['placeName']\r\n    })\r\n\r\n    const [searchMode, setSearchMode] = useState(searchModes[0])\r\n    const [open, setOpen] = useState(false)\r\n    const [searching, setSearching] = useState(false)\r\n    const [searchingList, setSearchingList] = useState(places.map(place => {return {item: place}}))\r\n    const [selectedIndex, setSelectedIndex] = useState(0)\r\n\r\n    const selectedSearch = searchingList[selectedIndex]?.item\r\n\r\n    useEffect(() => {\r\n        AxiosInstance.get(`/place/list`).then(r => {\r\n            updatePlaces(r.data)\r\n        })\r\n    }, [])\r\n\r\n    const searchFromRestAPI = () => {\r\n        const invalidSearchNode = document.querySelector('#selectedDate:invalid')\r\n        if (invalidSearchNode) {\r\n            invalidSearchNode.style.borderColor = 'red'\r\n            setOpen(true);\r\n            return\r\n        }\r\n        const validSearchNode = document.querySelector('#selectedDate')\r\n        validSearchNode.style.borderColor = ''\r\n\r\n        if (!selectedSearch) {setOpen(true); return}\r\n\r\n        const date = new Date(document.querySelector('#selectedDate').value)\r\n        AxiosInstance.get(`/place/${selectedSearch.placeID}/${date.getFullYear()}${date.getMonth() + 1}${date.getDate()}`).then(r => {\r\n            search(r.data)\r\n            history.push(`/place/${selectedSearch.placeID}/${date.getFullYear()}${date.getMonth() + 1}${date.getDate()}`)\r\n        })\r\n    }\r\n\r\n    const changeSelectedIndex = evt => {\r\n        switch (evt.keyCode) {\r\n            case 13:\r\n                evt.preventDefault()\r\n                document.querySelector(\"#searchButton\").click()\r\n                break\r\n            case 38:\r\n                evt.preventDefault()\r\n                setSelectedIndex(selectedIndex === 0 ? searchingList.length - 1 : selectedIndex - 1)\r\n                break\r\n            case 40:\r\n                evt.preventDefault()\r\n                setSelectedIndex(selectedIndex === searchingList.length - 1 ? 0 : selectedIndex + 1)\r\n                break\r\n            default: break\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CCol xs={12}>\r\n                <CFormGroup row className=\"my-3\">\r\n                    <CCol xs={2} className=\"d-flex justify-content-end align-items-center\">\r\n                        <CSelect id=\"searchMode\"\r\n                                 onChange={(evt) => setSearchMode(searchModes[evt.target.selectedIndex])}>\r\n                            {\r\n                                searchModes.map(value => {\r\n                                    return (\r\n                                        <option key={value.id}>{value.label}</option>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </CSelect>\r\n                    </CCol>\r\n                    <CCol xs={3} className=\"d-flex justify-content-end align-items-center\">\r\n                        <CInput type=\"date\" required id='selectedDate'/>\r\n                    </CCol>\r\n                    <CCol xs={5} className=\"d-flex justify-content-end align-items-center\">\r\n                        <CInput required placeholder={searchMode.placeholder} id='searchInput' autoComplete=\"off\"\r\n                                onFocus={() => setSearching(true)} onBlur={() => setSearching(false)}\r\n                                onChange={evt => setSearchingList(fuse.search(evt.target.value))}\r\n                                onKeyUp={changeSelectedIndex}\r\n                        />\r\n                    </CCol>\r\n                    <CCol xs={2} className=\"d-flex justify-content-end align-items-center\">\r\n                        <CButton color=\"primary\" onClick={searchFromRestAPI}\r\n                                 className=\"w-100\" id=\"searchButton\">{`${searchMode.label} `}검색</CButton>\r\n                    </CCol>\r\n                </CFormGroup>\r\n                <CRow className=\"mb-3\">\r\n                    <CCol xs={5}/>\r\n                    <CCol xs={5}>\r\n                        <CCollapse show={searching}>\r\n                            <CListGroup accent>\r\n                                {\r\n                                    searchingList.map((item, idx) => {\r\n                                        return (\r\n                                            <CListGroupItem accent={idx === selectedIndex ? \"primary\" : \"secondary\"}\r\n                                                            className=\"bg-white text-dark\" key={idx}\r\n                                            >{item.item?.placeName}</CListGroupItem>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </CListGroup>\r\n                        </CCollapse>\r\n                    </CCol>\r\n                </CRow>\r\n            </CCol>\r\n            <CModal show={open} onClose={() => setOpen(!open)} color=\"danger\">\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle>{initialState.header}</CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    {initialState.content}\r\n                </CModalBody>\r\n            </CModal>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        ...ownProps,\r\n        ...state\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        search: (result) => {\r\n            dispatch({type: actions.place, ...result})\r\n        },\r\n        updatePlaces: (result) => {\r\n            dispatch({type: actions.placeList, result})\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaceSearcher)"],"sourceRoot":""}